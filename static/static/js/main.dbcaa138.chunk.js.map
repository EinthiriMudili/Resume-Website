{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","props","state","resume","axios","get","then","result","setState","data","className","this","name","age","gpa","hobbies","map","hobby","courses","course","awards","award","src","alt","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"mJAAAA,EAAOC,QAAU,IAA0B,kC,4KCgE5BC,E,kDArDd,WAAYC,GAAQ,IAAD,8BAClB,cAAMA,IACDC,MAAQ,CAAEC,OAAQ,MAFL,E,qDAKT,IAAD,OAMR,OAhBMC,IAAMC,IAAI,gDAYJC,MAAK,SAAAC,GAChB,EAAKC,SAAS,CAAEL,OAAQI,EAAOE,UAI/B,yBAAKC,UAAU,aAEQ,MAArBC,KAAKT,MAAMC,OAAkB,mDAAiC,6BAG7D,gCAAMQ,KAAKT,MAAMC,OAAOS,KAAxB,KACA,qCAAWD,KAAKT,MAAMC,OAAOU,IAA7B,KACA,qCAAWF,KAAKT,MAAMC,OAAOW,IAA7B,KAKA,wBAAIJ,UAAU,aAAd,aACA,wBAAIA,UAAU,cACZC,KAAKT,MAAMC,OAAOY,QAAQC,KAAI,SAAAC,GAAK,OAAI,wBAAIP,UAAU,mBAAmBO,OAG1E,wBAAIP,UAAU,cAAd,aACA,wBAAIA,UAAU,cACZC,KAAKT,MAAMC,OAAOe,QAAQF,KAAI,SAAAG,GAAM,OAAI,wBAAIT,UAAU,mBAAmBS,OAG3E,wBAAIT,UAAU,WAAd,YACA,wBAAIA,UAAU,cACZC,KAAKT,MAAMC,OAAOiB,OAAOJ,KAAI,SAAAK,GAAK,OAAI,wBAAIX,UAAU,mBAAmBW,OAKzE,yBAAKX,UAAU,aACd,yBAAKY,IAAI,cAAcZ,UAAU,gBAAgBa,IAAI,mB,GA5C1CC,IAAMC,WCGJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhC,MAAK,SAAAiC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.dbcaa138.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport axios from 'axios';\n\nfunction getResume() {\n\treturn axios.get(\"https://einthiri-resume.herokuapp.com/resume\");\n}\n\nclass App extends React.Component {\n\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = { resume: null };\n\t}\n\n\trender() {\n\n\t\tgetResume().then(result => {\n\t\t\tthis.setState({ resume: result.data });\n\t\t});\n\n\t\treturn (\n\t\t\t<div className='container'>\n\t\t\t\t{\n\t\t\t\t\tthis.state.resume == null ? (<h4> Resume is loading </h4>) : (<div>\n\n\n\t\t\t\t\t\t<h2> {this.state.resume.name} </h2>\n\t\t\t\t\t\t<h4> Age: {this.state.resume.age} </h4>\n\t\t\t\t\t\t<h4> Gpa: {this.state.resume.gpa} </h4>\n\n\n\n\n\t\t\t\t\t\t<dt className=\"bg-danger\"> Hobbies </dt>\n\t\t\t\t\t\t<ul className=\"list-group\">\n\t\t\t\t\t\t\t{this.state.resume.hobbies.map(hobby => <li className='list-group-item'>{hobby}</li>)}\n\t\t\t\t\t\t</ul>\n\n\t\t\t\t\t\t<dt className=\"bg-success\"> Courses </dt>\n\t\t\t\t\t\t<ul className=\"list-group\">\n\t\t\t\t\t\t\t{this.state.resume.courses.map(course => <li className='list-group-item'>{course}</li>)}\n\t\t\t\t\t\t</ul>\n\n\t\t\t\t\t\t<dt className=\"bg-info\"> Awards </dt>\n\t\t\t\t\t\t<ul className=\"list-group\">\n\t\t\t\t\t\t\t{this.state.resume.awards.map(award => <li className='list-group-item'>{award}</li>)}\n\t\t\t\t\t\t</ul>\n\n\t\t\t\t\t\n\n\t\t\t\t\t\t<div className=\"container\">\n\t\t\t\t\t\t\t<img src=\"Profile.jpg\" className=\"profile-image\" alt=\"Profile\" />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>)\n\t\t\t\t}\n\t\t\t</div>\n\n\t\t);\n\t}\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}